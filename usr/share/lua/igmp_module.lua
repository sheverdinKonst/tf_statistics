---
--- Generated by Luanalysis
--- Created by sheverdin.
--- DateTime: 2/16/24 4:51 PM
---

local igmp_module = {}

igmp_module.option = {
    "igmp_snooping",
    "hash_max",
    "multicast_querier",
    "robustness",
    "query_interval",
    "query_response_interval",
    "last_member_interval",
}

igmp_module.cmd = {
    "state",
    "max_snooping_table_size",
    "multicast_querier",
    "robustness",
    "query_interval",
    "query_response_interval",
    "last_member_interval"
}

igmp_module.printStr = {
    "\tState:                   \t",
    "\tMax_snooping_table_size: \t",
    "\tMulticast querier:       \t",
    "\tRobustness:              \t",
    "\tQuery interval:          \t",
    "\tQuery response interval: \t",
    "\tLast member interval:    \t"
}

igmp_module.errorCode = {
    notdef = "null",
    zeror = "zero"
}

igmp_module.dev_mcast = {
    {key = "id",            str = "\tid:                        "},
    {key = "if_index",      str = "\tinterface index:           "},
    {key = "label",         str = "\tlabel:                     "},
    {key = "number_of_ref", str = "\tnumber of references:      "},
    {key = "bound_addr",    str = "\tnumber of bound addresses: "}
}

igmp_module.if_name = {
   "eth0",
   "switch",
   "switch.11",
   "lan1",
   "lan2",
   "lan3",
   "lan4",
   "lan5",
   "lan6",
   "lan7",
   "lan8",
   "lan9",
   "lan10"
}

function igmp_module.getRawJsonData(igmpStatus)
    local json_data         = {}
    local current_interface = ""
    local current_id        = 0

    local ctrl = {
        maxCol = 5,
        interfaceNum = 0
    }

    for line in igmpStatus:gmatch("[^\n]+") do
        local cols = {}
        for col in line:gmatch("%S+") do
            table.insert(cols, col)
        end
        if #cols == ctrl.maxCol then
            local interface = "\"" .. cols[2] .. "\" :"
            if interface ~= current_interface then

                ctrl.interfaceNum = ctrl.interfaceNum + 1
                json_data[interface] = {}
                current_interface = interface
                current_id = 0
            end

            current_id = current_id + 1
            json_data[interface][current_id] = {
                id              = tostring(current_id),
                if_index        = cols[1],
                label           = cols[3],
                number_of_ref   = cols[4],
                bound_addr      = cols[5]
            }
        end
    end
    return json_data, ctrl
end

function igmp_module.convertTableToJson(json_data, ctrl)
    local json_output = "{\n \"mcast\": {\n\"interfaces\": {\n"
    local count_1 = 0
    local count_2 = 0
    local count_3 = 0
    --rint("size json_data= " .. #json_data)
    for interface, data in pairs(json_data) do
        count_1 = count_1+1

        json_output = json_output .. " " .. interface .. " [\n"
        count_2 = 0
        for _, values in pairs(data) do
            count_2 = count_2 + 1
            count_3 = 0
            if count_2 == 1 then
                json_output = json_output .. "\t{\n"
            elseif  count_2 > 1 then
                json_output = json_output .. "\t{\n"
            end
            for key, value in pairs(values) do
                count_3 = count_3 + 1
                if count_3 <  ctrl.maxCol then
                    json_output = json_output .. ' \t\t\"' .. key .. '":"' .. value .. '",\n'
                elseif  count_3 == ctrl.maxCol then
                    json_output = json_output .. ' \t\t\"' .. key .. '":"' .. value .. '"\n'
                end
            end

            if count_2 < #data then
                json_output = json_output .. "\t},\n"
            elseif count_2 == #data  then
                json_output = json_output .. "\t}\n"
            end
        end

        if count_1 < ctrl.interfaceNum then
            json_output = json_output .. "],\n"
        elseif count_1 == ctrl.interfaceNum then
            json_output = json_output .. "]\n"
        end
    end
    json_output = json_output .. "}\n}\n}"
    return json_output
end

return igmp_module
