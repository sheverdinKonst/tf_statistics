
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/11/24 4:58 PM
---

require "bit"

local tf  = require "tf_module"
local ar  = require "autorestart_module"
local poe = require "tf_poe_module"
local i2c = require "i2c_module"
local snmp_base = require "snmp_base"

local snmp_module = {}

local function get_ubusSize(ubusStruct)
    local count = 0
    for key, value in pairs(ubusStruct) do
        if type(value) == "table" then
            count = count + 1
        end
        --print("key = " .. key)
    end
    return count
end

local function i2c_handler(snmp_obj, index)
    local jsonInfo
    local res = ""
    local name = ""

    if type(snmp_obj.name) == "table" then
        if tonumber(index) > #snmp_obj.name then
            print("over_range")
            return nil
        end
        name = snmp_obj.name[tonumber(index)]
    elseif snmp_obj.name == "inputState" then
        if tonumber(index) > #i2c.inputStatus_list then
            print("over_range")
            return nil
        end
        name = i2c.inputStatus_list[index]
    else
        name = snmp_obj.name
    end
    --print("name = " .. name)
    jsonInfo = tf.getUbusDataByName(name)
    res = jsonInfo.hw_sys[name]
    --print("RES = " .. res)
    if (snmp_obj.isZero == "yes") then
        res = tonumber(res) + 1
    end

    --if (snmp_obj.isEnum == "yes") then
    --    --print("isEnum == yes")
    --end
    --
    --if (snmp_obj.isZero == "yes") then
    --    --print("isZero == yes")
    --end

    return res
end

local function snmp_getPoeStatus(mibObj, portNum)
    local poeInfoJson = poe.getPoeStatusInfo()
    local res = ""
    local poePorts = poeInfoJson[poe.enum.ports]
    local count = 0

    count = get_ubusSize(poePorts)
    if tonumber(portNum) > count or tonumber(portNum) < 1 then
        print("over_range " .. count .. " port num " .. portNum)
        return nil
    end

    local portStr = "" .. "lan" .. tostring(portNum)
    local poePortInfo = poePorts[portStr]
    if (mibObj.name == "portPoeStatusState") then
        local poePortStatus = poePortInfo[poe.portsEnum.status]
        res = poe.statusEnum[poePortStatus]
    elseif (mibObj.name == "portPoeStatusPower") then
        if poePortInfo[poe.portsEnum.consumption] ~= nil then
            res = poePortInfo[poe.portsEnum.consumption]
        else
            res = ""
        end
    end
    return res
end

local function snmp_getPoeSate(mibObj, portNum)
    local jsonInfo = {}
    local res = ""

    --portNum = tonumber(portNum)
    portNum = "lan" .. portNum
    --print("portNum = " .. portNum)
    jsonInfo  = poe.getPoeSateInfo(portNum)

    local temp = jsonInfo.values
    local paramTable = poe.portPoE_config[mibObj.name]
    local paramName  = paramTable[1]

    temp = temp[paramName]
    --print("type(temp) = " .. type(temp))

    if mibObj.isEnum == "yes" then
        temp = temp .. "d"
        res = mibObj.enum[temp]
    else
        res = temp
    end
    return res
end

local function snmp_getARconfig(mibObj, portNum)
    local jsonInfo = {}
    local resConfig = ""

    --portNum = tonumber(portNum)
    portNum = "lan" .. portNum
    --print("portNum = " .. portNum)
    jsonInfo  = ar.showConfig(portNum)

    local temp = jsonInfo.values
    local paramTable = ar.configEnum[mibObj.name]
    local paramName  = paramTable[1]

    --print("paramName = " .. paramName)
    temp = temp[paramName]
    --print("type(temp) = " .. type(temp))
    --print("Temp 3 = " .. temp)

    if mibObj.isEnum == "yes" then
        resConfig = mibObj.enum[temp]
        --print("resConfig = " .. resConfig)
    else
        resConfig = temp
    end

    local parts = {}
    if mibObj.name == "autoReStartTimeOnHour" or mibObj.name == "autoReStartTimeOffHour" then
        --print("time HH = " .. resConfig)
        local time = tf.get_hour_minutes(resConfig)
        if (time[1] ~= nil) then
            resConfig = time[1]
        else
            resConfig = 255
        end
    elseif mibObj.name == "autoReStartTimeOnMin" or mibObj.name == "autoReStartTimeOffMin" then
        --print("time MM = " .. resConfig)
        local time = tf.get_hour_minutes(resConfig)
        if (time[2] ~= nil) then
            resConfig = time[2]
        else
            resConfig = 255
        end
    end

    return resConfig
end

local function snmp_getARerrorCode(portNum)
    local jsonInfo = {}
    local arPoeStatus = {}
    local testType = 0

    portNum = tonumber(portNum)
    jsonInfo  = ar.showStatus()
    arPoeStatus = jsonInfo.port[portNum]

    --print("--------------------------------------------")
    testType = tonumber(arPoeStatus.test_type) + 1
    local error_Code_in = arPoeStatus.error_Code
    local error_Code_local = tonumber(ar.errorCode[testType][2])
    local error_Code_link = tonumber(ar.errorCode[2][2])
    local error_Code_OK = tonumber(ar.errorCode[6][2])

    --print("test_type  =         " .. testType)
    --print("errorCode[testType]  " .. errorCode[testType][2])
    --print("error_Code_in        " .. error_Code_in)
    --print("logic " .. tostring(bit.band(error_Code_in, error_Code_local)))
    --print("error_Code_link = " .. error_Code_link)
    --print("logic  test link " .. tostring(bit.band(error_Code_in, error_Code_link)))
    local res = ""
    if (tonumber(bit.band(error_Code_in, error_Code_local)) == error_Code_local) then
        --print("id         = " .. arPoeStatus[arInfo.id])
        --print("error_Code = " .. arPoeStatus[arInfo.error_Code])
        --print("if 1")
        res = tostring(ar.errorCode[testType][3])
    elseif (tonumber(bit.band(error_Code_in, error_Code_link)) == error_Code_link) then
        --rint("id         = " .. arPoeStatus[arInfo.id])
        --rint("error_Code = " .. arPoeStatus[arInfo.error_Code])
        --rint("if 1")
        res = tostring(ar.errorCode[2][3])
    elseif (tonumber(error_Code_in) == error_Code_OK) then
        --print("if 2")
        res = tostring(ar.errorCode[6][3])
    end
    --print("res = " .. res)
    return res
end

function snmp_module.main_handler(mib_obj, index)
    local res = ""
    print("name = " .. mib_obj.name)
    print("ubus = " .. mib_obj.ubusType)

    if mib_obj.ubusType == "i2c" then
        --print("i2c handler")
        res = i2c_handler(mib_obj, index)
        --print("res from mib == " .. res)
    elseif mib_obj.ubusType == "poe_status" then
        --print("Get poe status")
        res = snmp_getPoeStatus(mib_obj, index)
    elseif mib_obj.ubusType == "poe_config" then
        --print("index = " .. index)
        res = snmp_getPoeSate(mib_obj, index)
    elseif mib_obj.ubusType == "ar_status" then
        --print("Get auto_restart status")
        res = snmp_getARerrorCode(index)
    elseif mib_obj.ubusType == "ar_config" then
        --print("Get auto_restart config")
        --print("name = " .. mib_obj.name .. "  index = " .. index)
        res = snmp_getARconfig(mib_obj, index)
    else
        res = nil
        print("error: ubus type not found")
    end
    return res
end

function snmp_module.getRequestType(arg_1)
    local requestType = ""
    if arg_1 == "-n" or arg_1 == "-g" then
        requestType = snmp_base.requestType[arg_1]
    else
        requestType = ""
    end
    return requestType
end

local function get_object(list, index)
    local obj = {}
    if list[index] ~= nil then
        local obj_tmp = list[index]
        if obj_tmp[3] ~= nil then
            obj = obj_tmp
        end
    end
    return obj
end

function snmp_module.get_oidArr(oid)
    local arr = {}
    local in_endIndex = string.len(oid)
    oid = string.sub(oid, 19, in_endIndex)
    for num in oid:gmatch("%d+") do
        table.insert(arr, tonumber(num))
        --print("num = " .. num)
    end
    return arr
end

local function clearOidFromPoint(input_oid)
    local in_endIndex = string.len(input_oid)
    return string.sub(input_oid, 2, in_endIndex)
end

function snmp_module.find_oidObj(arr, oid)
    local obj = {}
    --local oid_arr = get_oidArr(oid)
    local oid_arr_len = #arr
    local modified_oid = clearOidFromPoint(oid)
    local base_oid = "1.3.6.1.4.1.42019"
    local current_oid = modified_oid
    local mib_obj = {}
    local last_index = ""
    local index_arr = {}
    local count = 0
    for i = #arr, 1, -1 do
        count = count + 1
        index_arr[count] = arr[i]
        --print("current_oid = " .. current_oid)
        if snmp_base.mib_list[current_oid] ~= nil then
            mib_obj = snmp_base.mib_list[current_oid]
            --print("name = " .. mib_obj.name)
            local endIndex = string.len(current_oid)
            current_oid = string.sub(current_oid, 1, endIndex - 2)
            break
        elseif snmp_base.mib_list[current_oid] == nil then
            --print("snmp_base.mib_list[current_oid] == nil")
            local endIndex = string.len(current_oid)
            current_oid = string.sub(current_oid, 1, endIndex - 2)
            --print("prev_oid = " .. prev_oid)
            --print("current_oid = " .. current_oid)
            mib_obj = nil
        end
        --print("end for loop")
    end
    --print("last index = " .. last_index)
    --print("current_oid = " .. current_oid)
    --print(" ------------------------------  ")
    return mib_obj, current_oid, index_arr
end

function snmp_module.find_nextMibObj(modified_oid)
    local mibObj = {}
    local nodeType = ""
    local next_oid = ""
    local endIndex = string.len(modified_oid)
    local base_oid = string.sub(modified_oid, 1, endIndex - 2)
    local index = string.sub(modified_oid, endIndex, endIndex)
    --print("base_oid = " .. base_oid)
    if snmp_base.mib_list[modified_oid] ~= nil then
        mibObj = snmp_base.mib_list[modified_oid]
        if mibObj.nodetype == "scalar" then
            --print("Find mib object with scalar")
            local next_index = ".0"
            next_oid = modified_oid .. next_index
            --print("base_oid " .. base_oid)
            return mibObj, next_oid, nil
        elseif mibObj.nodetype == "column" then
            --print("Find mib object with column")
        end
    elseif snmp_base.mib_list[modified_oid] == nil then
        --print("MIB obj not Found")
        --print("index = " .. index)
        if snmp_base.mib_list[base_oid] ~= nil then
            mibObj = snmp_base.mib_list[base_oid]
            if mibObj.nodetype == "scalar" then
                endIndex = string.len(base_oid)
                index = string.sub(base_oid, endIndex, endIndex)
                index = tostring(tonumber(index) + 1)
                --print("index = " .. index)
                next_oid = base_oid .. "." .. index .. ".0"
                --print("next_oid = " .. next_oid)
                return nil, next_oid, nil
            end
        end
        return
    end
    return nil
end

-- function snmp_module.get_mibTable(arr)
--     local obj = {}
--     local base_oid = "1.3.6.1.4.1.42019"
--     local index = ""
--     local status = "in_progress"
--
--     local list = snmp_base.main_list
--     for i = 1, #arr do
--         index = arr[i]
--         obj = list[index]
--         if obj ~= nil then
--             if (obj[4] == "not_defined") then
--                 obj = nil
--                 break
--             elseif obj[4] == "list" then
--                 status = "in_progress"
--                 --print("name = " .. obj[2] .. " type = " .. obj[4])
--                 list = obj[3]
--             elseif obj[4] == "table" then
--                 status = "done"
--                 --print("name = " .. obj[2] .. " type = " .. obj[4])
--                 break
--             end
--         end
--         base_oid = base_oid .. "." .. tostring(index)
--     end
--
--     if obj ~= nil then
--         index = 1
--         --print("-------------- WHILE ---------------------")
--         while status ~= "done" do
--             print("list len = " .. #list)
--             if index <= #list then
--                 print("index = " .. index)
--                 obj = list[index]
--                 if (obj[4] == "not_defined") then
--                     index = index + 1
--                 elseif obj[4] == "list" then
--                     index = 1
--                     status = "in_progress"
--                     list = obj[3]
--                 elseif obj[4] == "table" or obj[4] == "scalar" then
--                     status = "done"
--                     break
--                 end
--             elseif index > #list then
--                 print("----------  END")
--                 obj = nil
--                 break
--             end
--             print("1 name = " .. obj[2] .. " type = " .. obj[4])
--             print("1 base_oid = " .. base_oid)
--         end
--         print("Done --- name = " .. obj[2] .. " type = " .. obj[4])
--         print("oid - " .. obj[1])
--     end
--
--     return obj
-- end

function snmp_module.get_mibTable(oid_arr)
    local obj = {}
    local obj_arr = {}
    local base_oid = "1.3.6.1.4.1.42019"
    local index = ""
    local status = "in_progress"
    local list = snmp_base.main_list
    local oid_index = 0

    index = 1

    --print("-------------- WHILE ---------------------")
    while status ~= "ok" do
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> While 1.1")
        for i = 1, #oid_arr do
            print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FOR 1.1")
            oid_index = oid_arr[i]
            print("i = " .. i)
            print("oid_index = " .. oid_index)
            print("#list = " .. #list)
            if oid_index <= #list then
                obj = list[oid_index]
                --print("oid = " .. obj[1] .. "   name = " .. obj[2])
                if obj ~= nil then
                    obj_arr[i] = obj
                    if obj[4] == "not_defined" then
                        print("not_defined")
                        break
                    elseif obj[4] == "list" then
                        print("list")
                        list = obj[3]
                        print("i = " .. i .. "  len = " .. #oid_arr)
                        if i == #oid_arr then
                            print("i == #oid_arr")
                            oid_arr[i + 1] = 1
                            list = snmp_base.main_list
                            status = "in_progress"
                        end

                    elseif obj[4] == "scalar" then
                        print("scalar")
                    elseif obj[4] == "table" then
                        print("table")
                        status = "ok"
                        break
                    end
                end
            else
                status = "over"
                break
            end
        end
    end
    return obj_arr, status
end

local nodetypeEnum = {
    table   = 1,
    entry   = 2,
    row     = 3,
    column  = 4,
    scalar  = 5,
    empty   = 6
}

function snmp_module.get_nextRequestHandler(obj_arr, oid_arr)
    local len_objArr = #obj_arr

    local len_oidArr = #oid_arr
    local new_oid_arr = {}
    local count = 0
    local list = {}
    local last_obj = obj_arr[len_objArr]
    local nodetype = nodetypeEnum[last_obj[4]]
    print("nodetype = " .. nodetype)
    print("oid = " .. last_obj[1] .. " name = " .. last_obj[2] .. " type = " .. last_obj[4])

    if len_oidArr == len_objArr then
        print("len_oidArr == len_objArr")
        if nodetype < nodetypeEnum.column then
            oid_arr[len_oidArr + 1] = 1
            len_oidArr = #oid_arr
        end
    end
    print("len_oidArr = " .. len_oidArr .. " len_objArr = " .. len_objArr)
    while len_oidArr > len_objArr do
        len_objArr = len_objArr + 1
        count = count + 1
        new_oid_arr[count] = oid_arr[count]
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>---------SECOND WHILE---------------  ")
        print("count = " .. count .. "  new_oid_arr[count] = " .. new_oid_arr[count])
        print("nodetype = " .. nodetype)
        print("len_objArr = " .. len_objArr)
        if last_obj[4] == "table" then
            print("table")
            print("oid = " .. last_obj[1] .. " name = " .. last_obj[2] .. " type = " .. last_obj[4])
            last_obj = last_obj[3]
            print("table oid = " .. last_obj[1] .. " name = " .. last_obj[2] .. " type = " .. last_obj[4])
        elseif last_obj[4] == "entry" then
            print("entry")
            last_obj = last_obj[3]
            print("oid = " .. last_obj[1] .. " name = " .. last_obj[2] .. " type = " .. last_obj[4])
            if len_oidArr > len_objArr then

            end
        elseif last_obj[4] == "row" then
            print("row")
            for i = 1, #oid_arr do
                print("oid_arr[i] = " .. oid_arr[i])
            end
            list = last_obj[3]
            local len_list = #list
            local oid_index = oid_arr[len_objArr]
            print("len_objArr = " .. len_objArr)
            print("oid_index = " .. oid_index)
            if oid_index <= len_list then
                last_obj = list[oid_index]
                print("row oid = " .. last_obj[1] .. " name = " .. last_obj[2] .. " type = " .. last_obj[4])
            else
                print("over_range")
                local len_new_oid_arr = #new_oid_arr
                len_objArr = #obj_arr
                local last_value = oid_arr[len_objArr]
                print("len_new_oid_arr = " .. len_new_oid_arr)
                print("oid_index = " .. oid_index)
                print("last_value = " .. last_value)
                print("len_objArr = " .. len_objArr)
                oid_arr = {}
                for i = 1, len_new_oid_arr do
                    oid_arr[i] = new_oid_arr[i]
                    --print("oid_arr[i] = " .. oid_arr[i])
                end
                oid_arr[len_objArr] = last_value + 1
                len_oidArr = #oid_arr
                print("oid_arr[len_objArr ]  = " .. oid_arr[len_objArr])
                return oid_arr, "not_found"
            end
        elseif last_obj[4] == "column" then
            if last_obj[3] == nil then
                print("next list is empty")
            end
            print("column oid = " .. last_obj[1] .. " name = " .. last_obj[2] .. " type = " .. last_obj[4])
        elseif last_obj[4] == "scalar" then
            print("scalar")
        end
        nodetype = nodetypeEnum[last_obj[4]]

        if len_oidArr == len_objArr then
            if nodetype < nodetypeEnum.column then
                len_oidArr = #oid_arr
                oid_arr[len_oidArr + 1] = 1
                len_oidArr = #oid_arr
            end
        end
    end
    print("end nodetype = " .. nodetype)
    return oid_arr, "found"
end

return snmp_module

