#!/usr/bin/env lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/18/24 11:46 AM
---

local json  = require "luci.jsonc"
local tf    = require "tf_module"
local ar    = require "autorestart_module"

local methods = {
    show = {
        args = { func = "String", port = "String" },
        call = function(f_args)
            --local ar_status = {}
            local ar_status = "OK"
            if f_args.func == "status" then
                --print("show ar status")
                ar_status = ar.showStatus()
                --ar_status = "status"
            elseif f_args.func == "config" then
                --print("show ar config")
                ar_status = ar.showConfig()
            end
            return ar_status
            -- {
            --     auto_restart = ar_status
            -- }, 0
        end
    },
    showConfig = {
        args = { port = "String" },
        call = function(f_args)
            local res = "show config OK"
            --print("ar_showConfig")
            --local ar_status = ar_showConfig()
            --return ar_status
            return
                {
                    config = res
                }, 0
        end
    }
}

local function parseInput()
    local parse = json.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(json.stringify({ error = err or "Incomplete input" }))
        os.exit(1)
    end

    return parse:get()
end

local function validateArgs(func, uargs)
    local method = methods[func]
    if not method then
        print(json.stringify({ error = "Method not found" }))
        os.exit(1)
    end

    if type(uargs) ~= "table" then
        print(json.stringify({ error = "1 Invalid arguments" }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local k, v
    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or
            (v ~= nil and type(v) ~= type(margs[k]))
        then
            print(json.stringify({ error = "2 Invalid arguments" }))
            os.exit(1)
        end
    end
    return method
end

if arg[1] == "list" then
    local _, method, rv = nil, nil, {}
    for i, method in pairs(methods) do
        rv[i] = method.args or {}
    end
    print((json.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local result, code = method.call(args)
    print((json.stringify(result):gsub("^%[%]$", "{}")))
    print(result)
    os.exit(code or 0)
end
