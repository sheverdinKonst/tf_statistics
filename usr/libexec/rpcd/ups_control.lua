#!/usr/bin/env lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/15/24 15:12
---

local json   = require "luci.jsonc"
local tf     = require "tf_module"
local tf_ups = require "ups_module"

local ups_res = {}

local methods = {
    getStatus = {
        args = { bridge = "string" },
        call = function()
            --print("CALL ....")
            local cmdtype = " get"

            for i, _ in pairs(tf_ups.upsEnum) do
                cmd = ""
                cmd = "hwsys_ctrl " .. tf_ups.upsEnum[i][2] .. cmdtype
                local temp = tostring(tf.executeCommand(cmd))
                temp = string.sub(temp, 1, #temp - 1)
                local key  = tf_ups.upsEnum[i][1]
                ups_res[key] = temp
            end

            return
                {
                    ups_control = ups_res
                }, 0
        end
    }
}

local function parseInput()
    local parse = json.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(json.stringify({ error = err or "Incomplete input" }))
        os.exit(1)
    end

    return parse:get()
end

local function validateArgs(func)
    local method = methods[func]
    if not method then
        print(json.stringify({ error = "Method not found" }))
        os.exit(1)
    end

    --if type(uargs) ~= "table" then
    --    print(json.stringify({ error = "1 Invalid arguments" }))
    --    os.exit(1)
    --end
    --
    --uargs.ubus_rpc_session = nil

    --local k, v
    --local margs = method.args or {}
    --for k, v in pairs(uargs) do
    --    if margs[k] == nil or
    --        (v ~= nil and type(v) ~= type(margs[k]))
    --    then
    --        print(json.stringify({ error = "1 Invalid arguments" }))
    --        os.exit(1)
    --    end
    --end
    return method
end

if arg[1] == "list" then
    local _, method, rv = nil, nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((json.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    --print("arg_1  " .. arg[1])
    --print("arg_2  " .. arg[2])
    --local args = parseInput()
    local method = validateArgs(arg[2])
    local result, code = method.call()
    print((json.stringify(result):gsub("^%[%]$", "{}")))
    os.exit(code or 0)
end
