#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/6/24 2:58 PM
---

local tf        = require "tf_module"
local snmp      = require "tf_snmp_module"
local log       = require "tf_log"

local modified_oid = ""

local print_debug = 0
local log_debug = 0

local function printTolog(i, mib, res, inputOid, modifiedOid)
    local oidObj = {}
    i = tonumber(i)
    if (type(mib[2]) == "table") then
        local logFile = "/tmp/snmp_log/" .. "log" .. mib[2][tonumber(i)]
        oidObj = log:new(logFile, mib[2][tonumber(i)], res, i, inputOid, modifiedOid)
    else
        local logFile = "/tmp/snmp_log/" .. "log" .. mib[2] .. "_" .. i
        oidObj = log:new(logFile, mib[2], res, i, inputOid, modifiedOid)
    end
    oidObj:WritelogOid()
    --local logFile = "/tmp/" .. "logArg" .. mib_obj.name[index]
    --log.WritelogArg(logFile, arg)
end

local function getRequestType(type)
    return snmp.getRequestType(type)
end

local function send_Get_result(oid, mibObj, res)
    print(oid)

    if mibObj ~= nil then
        if (mibObj.valueType == "DisplayString") then
            print("String")
            res = string.gsub(res, "%s+$", "")
        else
            print(mibObj.valueType)
            print(res)
        end
    else
        print("OID")
        print("1.3.6.1.4.1.8072.3.2.10")
    end

end

local function getRequestHandler()
    local current_oid = ""
    local oid_arr = {}
    local result = ""
    local mib_obj = {}
    local error = "ok"
    oid_arr = snmp.get_oidArr(current_oid)
    mib_obj, current_oid, oid_arr = snmp.find_oidObj(oid_arr, current_oid)

    if mib_obj ~= nil then
        --print("element = " .. element)
        if (mib_obj.nodetype == "column") then
            --if (element == "" or element == nil) then
            --    error = "error: no element"
            --end
        end
        if error == "ok" then
            result = snmp.main_handler(mib_obj, element)
            send_Get_result(oid, mib_obj, result)
        end
    else
        error = "error no mib_obj"
    end

    if print_debug == 1 then
        print("getRequestHandler")
        if (oid ~= nil) then
            print("oid = ", oid)
        else
            print("oid nil")
        end
        if (mib_obj ~= nil) then
            print("name = " .. mib_obj.name)
            print("ubusType = " .. mib_obj.ubusType)
        else
            print("mib_obj nil")
        end
        if (element == nil) then
            print("element nil")
        elseif (element == "") then
            print("oid is column, Element must have value")
        else
            print("element = ", element)
        end
        print("result = ", result)
    end

    if log_debug == 1 then
        printTolog(element, mib_obj, result, input_oid, oid)
    end

    return error
end

local function getNextRequestHandler(requestType, oid)
    --print("getNextRequestHandler")

    local mib_obj = {}
    local index_arr = {}
    local next_index = ""
    local result = ""
    local current_oid = ""
    local status = "in_progres"
    local next_oid = ""
    while status ~= "done" do
        print(" ------------------------------  ")
        local oid_arr = snmp.get_oidArr(oid)
        mib_obj, current_oid, index_arr = snmp.find_oidObj(oid_arr, oid)

        if mib_obj == nil then
            print("--------------- mib_obj == nil")
            return 0
        end

        --print("last  = " .. oid_arr[#oid_arr])
        --print("last index_arr = " .. index_arr[#index_arr])

        --for key, value in pairs(index_arr) do
        --    print("key = " .. key .. " value = " .. value)
        --end
        print("1 current_oid = " .. current_oid)
        if mib_obj.nodetype == "scalar" then
            print("mib_obj scalar")
            print("name = " .. mib_obj.name)
            print("ubus = " .. mib_obj.ubusType)
            print("requestType = " .. requestType)

            if requestType == "GET_NEXT" then
                result = nil
                print("status = " .. status)
                if status == "send_data" then
                    print("status == send_data")
                    result = snmp.main_handler(mib_obj, next_index)
                    next_oid = snmp.get_next_oid(oid)
                    send_Get_result(current_oid, mib_obj, result)
                    status = "get_next_oid"
                end

            elseif requestType == "GET" then
                if #index_arr == 1 then
                    current_oid = current_oid .. "." .. index_arr[1]
                    next_index = ""
                    result = snmp.main_handler(mib_obj, next_index)
                    send_Get_result(current_oid, mib_obj, result)
                end
                status = "done"
            elseif requestType == "SET" then
                print("requestType: SET")
            end

        elseif mib_obj.nodetype == "column" then
            --print("column")
            --print("current_oid = " .. current_oid)
            --print("name = " .. mib_obj.name)
            --print("len = " .. #index_arr)
            --for key, value in pairs(index_arr) do
            --    print("key = " .. key .. " value = " .. value)
            --end

            if requestType == "GET_NEXT" then
                if #index_arr == 2 then
                    next_index = tostring(tonumber(index_arr[1]) + 1)
                    current_oid = current_oid .. "." .. index_arr[2] .. "." .. next_index
                    result = snmp.main_handler(mib_obj, next_index)
                    if result == "" or result == nil then
                        current_oid = current_oid .. "." .. tostring(tonumber(index_arr[2]) + 1)
                    elseif result ~= nil then
                        --print("current_oid = " .. current_oid)
                        --print("result = " .. result)
                        send_Get_result(current_oid, mib_obj, result)
                    end
                else
                    result = nil
                    mib_obj = nil
                    current_oid = ""
                    send_Get_result(current_oid, mib_obj, result)
                end
                --result = snmp.main_handler(mib_obj, next_index)
                --send_Get_result(current_oid, mib_obj, result)
            elseif requestType == "GET" then
                if #index_arr == 2 then
                    current_oid = current_oid .. "." .. index_arr[2] .. "." .. index_arr[1]
                    next_index = tostring(index_arr[1])
                    result = snmp.main_handler(mib_obj, next_index)
                    if result ~= nil then
                        --print("result = " .. result)
                        --print("current_oid = " .. current_oid)
                        send_Get_result(current_oid, mib_obj, result)
                    end
                else
                    result = nil
                    mib_obj = nil
                    current_oid = ""
                    send_Get_result(current_oid, mib_obj, result)
                end
            elseif requestType == "SET" then
                print("requestType: SET")
            end
            status = "done"
        elseif mib_obj.nodetype == "list" then
            --print("mib_obj.nodetype == list")
            if requestType == "GET_NEXT" then
                print("mib_obj.nodetype = " .. mib_obj.nodetype)
                --print("-------------------------------------")
                local list_obj = {}
                list_obj = snmp.get_mibTable(oid_arr)
                oid = "." .. list_obj[1]
                print("nodetype = " .. list_obj[4])
                print("oid = " .. oid)
                status = "send_data"
            elseif requestType == "GET" then
                status = "done"
            end
        elseif mib_obj.nodetype == "table" or mib_obj.nodetype == "entry" or mib_obj.nodetype == "row" then
            --print("mib_obj.nodetype = " .. mib_obj.nodetype)

        elseif mib_obj.nodetype == "" then
            --print("empty")
        end
        --print("result = " .. result)
        --send_Get_result(current_oid, mib_obj, result)
    end
    if log_debug == 1 then
        --print("next_index = " .. next_index)
        printTolog(next_index, mib_obj, result, oid, mib_obj[1])
    end
end

local function setHandler()

end

local requestHandlerList = {
    GET      = getRequestHandler,
    GET_NEXT = getNextRequestHandler,
    SET      = setHandler
}

local function tf_run_snmp()
    local inputOid = arg[2]
    local index         = ""
    local in_index      = ""
    local next_index    = ""
    local next_oid      = ""

    local requestType = getRequestType(arg[1])

    if requestType == nil or requestType == "" then
        print("requestType = nil")
        return 0
    end

    -- requestHandlerList[requestType]()
    local input_oid = arg[2]
    getNextRequestHandler(requestType, input_oid)

    -- *************************************************************

    --local res = ""
    --local requestType = string.sub(arg[1], 2, 2)
    --
    --if (requestType == "n") then
    --    next_oid = getnext_handler(modifiedOid, index)
    --    local endIndex = string.len(next_oid)
    --    next_index = string.sub(next_oid, endIndex, endIndex)
    --elseif (requestType == "g") then
    --    next_index = index
    --    --print("next_oid = " .. next_oid)
    --    --print("next_index = " .. next_index)
    --end
    
    ----print("inputOid = " .. inputOid)
    ----print("modifiedOid = " .. modifiedOid)
    ----print("name = " .. mib_obj.name)
    ----print("mib_obj.ubusType = ", mib_obj.ubusType)
    ----print("index = " .. index)
    --    local requestOid = ""
    --    if requestType == "g" then
    --        requestOid = inputOid
    --    elseif requestType == "n" then
    --        requestOid = "." .. next_oid
    --    end
    --    print(requestOid)
    --    print(res)
    --else
    --    local logFile = "/tmp/" .. "log_null"
    --    local oidObj = log:new(logFile, "null", 0, 0, inputOid, modifiedOid)
    --    oidObj:WritelogOid()
    --end
end

tf_run_snmp()

