#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 4/26/24 4:11 PM
---

local tf        = require "tf_module"
local snmp      = require "tf_snmp_module"
local log       = require "tf_log"

local requestType = arg[1]
local inputOid    = arg[2]

local function getRequestType(type)
    return snmp.getRequestType(type)
end

local function send_Get_result(oid, mibObj, res)
    print(oid)

    if mibObj ~= nil then
        if (mibObj.valueType == "DisplayString") then
            print("String")
            res = string.gsub(res, "%s+$", "")
        else
            print(mibObj.valueType)
            print(res)
        end
    else
        print("OID")
        print("1.3.6.1.4.1.8072.3.2.10")
    end

end

local statusList = {
    "ok",
    "over",
    'found'
}

local function main_handler()
    local obj_arr = {}
    local oid_arr = snmp.get_oidArr(inputOid)
    local status = "in_progress"

    while status ~= "found" do
        print("-----------------------------------   FIRST WHILE")
        obj_arr, status = snmp.get_mibTable(oid_arr)
        if status == "over" then
            print("status = " .. status)
            local new_arr = {}
            for i = 1, #oid_arr - 2 do
                new_arr[i] = oid_arr[i]
            end
            new_arr[#oid_arr - 1] = oid_arr[#oid_arr - 1] + 1
            new_arr[#oid_arr] = 1
            oid_arr = {}
            oid_arr = new_arr
            --print("last index = " .. oid_arr[#oid_arr])
        elseif status == "ok" then
            print("ok")
            for key, value in pairs(obj_arr) do
                print("key = " .. key .. " name = " .. value[2] .. " type = " .. value[4])
            end
        end

        if obj_arr == nil then
            print("not found")
        else
            print("found")
            print("obj_arr len = " .. #obj_arr)

            if requestType == "GET" then
                print("GET")
            elseif requestType == "GET_NEXT" then
                for i = 1, #oid_arr do
                    print(" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   oid_arr[i] = " .. oid_arr[i])
                end
                oid_arr, status = snmp.get_nextRequestHandler(obj_arr, oid_arr)
                for i = 1, #oid_arr do
                    print("1 - oid_arr[i] = " .. oid_arr[i])
                end
            elseif requestType == "SET" then
                print("SET")
            end

            -- if obj[4] == "not_defined" then
            --     print("not_defined")
            -- elseif obj[4] == "list" then
            --     print("list")
            -- elseif obj[4] == "scalar" then
            --     print("scalar")
            -- elseif obj[4] == "table" then
            --     print("table")
            --     break
            -- end

        end
    end
end


local function tf_run_snmp()

    requestType = snmp.getRequestType(requestType)
    print("requestType = " .. requestType)
    if requestType == nil or requestType == "" then
        print("requestType = nil")
        return 0
    end

    main_handler()

end

tf_run_snmp()
